using NetSerializer;
using NetworkLibrary.Components;
using Newtonsoft.Json;
using ProtoBuf;
using System;
using System.Buffers;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters.Binary;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;
using System.Xml.Serialization;
using TestExternalType;
using ZeroFormatter;

namespace ProcessStartTest
{
    [ProtoContract]
    [Serializable]
    [DataContract(Name = "a", Namespace = "")]
    public class Data
    {
        [DataMember(IsRequired = false, Order = 1, EmitDefaultValue =false)]
        [ProtoMember(1)]
        public Guid Id { get; set; }

        [DataMember(IsRequired = false, Order = 2, EmitDefaultValue = false)]
        [ProtoMember(2)]

        public DateTime Time { get; set; }

        [DataMember(IsRequired = false, Order = 3, EmitDefaultValue = false)]
        [ProtoMember(3)]

        public Dictionary<string, string> KVPairs { get; set; }
       
    }
    class BinarySerialization
    {
        public static void SerializeBinary()
        {
            var data = new Data();
            data.Id = Guid.NewGuid();
            data.Time = DateTime.Now;
            data.KVPairs = new Dictionary<string, string>() { { "Key1", "Value1" } };

            MemoryStream ms = new MemoryStream();

            BinaryFormatter formatter = new BinaryFormatter();
            formatter.Serialize(ms, data);
            ms.Position = 0;
            Data dabaBack = formatter.Deserialize(ms) as Data;
        }

        public static void SerializeDataContract()
        {
            var data = new Data();
            data.Id = Guid.NewGuid();
            data.Time = DateTime.Now;
            data.KVPairs = new Dictionary<string, string>() { { "Key1", "Value1" } };

            var ms = new MemoryStream();

            DataContractSerializer serialzier = new DataContractSerializer(typeof(Data));
            serialzier.WriteObject(ms, data);
            //var bytes = ms.GetBuffer();
            //var res = UTF8Encoding.UTF8.GetString(bytes);



            ms.Position = 0;
            var ret = serialzier.ReadObject(ms) as Data;
        }
       static  PooledMemoryStream ms = new PooledMemoryStream();
        public static void SerializeJson()
        {
            var data = new Data();
            data.Id = Guid.NewGuid();
            data.Time = DateTime.Now;
            data.KVPairs = new Dictionary<string, string>() { { "Key1", "Value1" } };

          
            Utf8JsonWriter writer = new Utf8JsonWriter(ms);

            System.Text.Json.JsonSerializer.Serialize(writer, data);

            var buff = ms.GetBuffer();

            var returned = System.Text.Json.JsonSerializer.Deserialize<Data>(new ReadOnlySpan<byte>(buff,0, (int)writer.BytesCommitted));
        }

        static NetSerializer.Serializer ser = new NetSerializer.Serializer(new List<Type>() { typeof(Data) });
        internal static void SerializeNetSerializer()
        {
            var data = new Data();
            data.Id = Guid.NewGuid();
            data.Time = DateTime.Now;
            data.KVPairs = new Dictionary<string, string>() { { "Key1", "Value1" } };



            var ms = new MemoryStream();

            ser.Serialize(ms, data);
            //ser.SerializeDirect<Data>(ms, data);
            ms.Position = 0;

            //var types = ser.GetTypeMap();
            //if (!types.ContainsKey(typeof(Data1)))
            //{
            //    ser.AddTypes(new List<Type>() { typeof(Data1) });
            //}

            var ob = (Data)ser.Deserialize(ms);
            //ser.DeserializeDirect<Data>(ms, out Data value);
        }


        public static void SerializeProtobuf()
        {
            var data = new Data();
            data.Id = Guid.NewGuid();
            data.Time = DateTime.Now;
            data.KVPairs = new Dictionary<string, string>() { { "Key1", "Value1" } };

            var ms = new MemoryStream();

            ProtoBuf.Serializer.Serialize(ms, data);
            //ms.Position = 0;
            
            var result = ProtoBuf.Serializer.Deserialize<Data>(new ReadOnlySpan<byte>(ms.GetBuffer(),0,(int)ms.Position));

           
        }


    }
}
